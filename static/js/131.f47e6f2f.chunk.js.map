{"version":3,"file":"static/js/131.f47e6f2f.chunk.js","mappings":"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","sources":["webpack://smart-meeting-organizer/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://smart-meeting-organizer/./src/components/Card/Card.module.scss?2b03","components/Card/Card.js","graphql/queries.js","webpack://smart-meeting-organizer/./src/pages/Home/Home.module.scss?ce6f","pages/Home/Home.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"focus-visible\":\"Button_focus-visible__vv8Dc\"};","import React from 'react'\nimport ButtonCSS from './Button.module.css'\n\nconst Button = ({ label }) => {\n  return (\n    <button \n      data-testid={\"button-\" + label}\n      className={ButtonCSS.btn}>\n        {label}\n    </button>\n  )\n}\n\nexport default Button","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__zQfcO\",\"title\":\"Card_title__fjt9r\",\"description\":\"Card_description__ZISe4\"};","import React, { useState } from \"react\";\nimport CardCSS from \"./Card.module.scss\";\n\nconst Card = ({\n  title,\n  descriptions\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n  return (\n    <div\n      className={`${CardCSS.card}`}\n      data-testid={\"card-\" + title}\n      style={{ background: isSelected ? \"#ccffcc\" : \"white\" }}\n      onClick={(e) => {\n        setIsSelected(!isSelected);\n      }}\n    >\n      <h2 className={CardCSS.title}>{title}</h2>\n      {descriptions &&\n        descriptions.map((description) => {\n          return (\n            <p className={CardCSS.description} key={Math.random() * 100000}>\n              {description}\n            </p>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Card","import { gql } from \"@apollo/client\";\n\nexport const GET_ALL_BUILDINGS = gql`\n    query Buildings {\n      Buildings {\n        name\n        meetingRooms {\n          name\n          meetings {\n            title\n            date\n            startTime\n            endTime\n          }\n        }\n      }\n    }\n`;\n\nexport const GET_ALL_MEETING_ROOMS = gql`\n  query MeetingRooms {\n    MeetingRooms {\n      id\n      name\n      floor\n      building {\n        name\n      }\n      meetings {\n        startTime\n        endTime\n      }\n    }\n  }\n`;\n\nexport const ADD_MEETING = gql`\n  mutation Meeting(\n    $id: Int!\n    $title: String!\n    $date: String!\n    $startTime: String!\n    $endTime: String!\n    $meetingRoomId: Int!\n    ) {\n    Meeting(\n      id: $id\n      title: $title\n      date: $date\n      startTime: $startTime\n      endTime: $endTime\n      meetingRoomId: $meetingRoomId\n    ) {\n      id\n      title\n      date\n    }\n  }\n`;","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"Home_home__9Ke73\"};","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport Card from '../../components/Card/Card';\nimport Button from '../../components/Button/Button';\nimport styles from \"./Home.module.scss\";\nimport { useQuery } from '@apollo/client';\nimport { GET_ALL_BUILDINGS } from '../../graphql/queries';\nimport moment from 'moment';\nimport { useDispatch } from \"react-redux\";\nimport { addBuildings } from \"../../redux/meetingSlice\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const { loading, error, data } = useQuery(GET_ALL_BUILDINGS, {\n    context: { headers: { token: \"a123gjhgjsdf6576\" } },\n  });\n\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  const buildingPayload = data.Buildings.map(d => d.name)\n\n  dispatch(addBuildings([...buildingPayload]));\n\n  const meetingRooms = data.Buildings.reduce((acc, curr) => acc += curr.meetingRooms.length, 0)\n  const meetings = data.Buildings.reduce((acc, curr) => {\n    if (curr.meetingRooms) { \n      curr.meetingRooms.forEach(meetingRoom => {\n        if (meetingRoom.meetings)\n          acc += meetingRoom.meetings.length;\n      })\n    }\n    return acc;\n  }, 0)\n\n  let meetingsNow = 0;\n\n  const freeMeetingRoomsNow = data.Buildings.reduce((acc, curr) => {\n    let count = 0;\n    curr.meetingRooms &&\n      curr.meetingRooms.meetings &&\n      curr.meetingRooms.meetings.forEach((meeting) => {\n        const { date, startTime, endTime } = meeting;\n        const currTime =\n          (new Date().getHours() < 10\n            ? \"0\" + new Date().getHours()\n            : new Date().getHours()) +\n          \":\" +\n          (new Date().getMinutes() < 10\n            ? \"0\" + new Date().getMinutes()\n            : new Date().getMinutes());\n\n        if (moment(date).isBefore(moment()) || moment(date).isAfter(moment())) {\n          count++;\n        } else {\n          const format = \"hh:mm\";\n\n          const time = moment(currTime, format);\n          const beforeTime = moment(startTime, format);\n          const afterTime = moment(endTime, format);\n\n          if (time.isBetween(beforeTime, afterTime)) {\n            count++;\n          } else {\n            meetingsNow++;\n          }\n        }\n        return acc + count;\n      });\n  }, 0)\n\n  return (\n    <div className={styles.home} data-testid={\"home-page\"}>\n      <Card\n        title=\"Buildings\"\n        descriptions={[\"Total: \" + data.Buildings.length]}\n      />\n      <Card title=\"Rooms\" descriptions={[\"Total \" + meetingRooms, `Free now ${freeMeetingRoomsNow ? freeMeetingRoomsNow: meetingRooms}`]} />\n      <Card title=\"Meetings\" descriptions={[`Total ${meetings} today`, `Total ${meetingsNow} going on now`]} />\n      <Link to=\"/add-meeting\">\n        <Button label={\"Add a Meeting\"} />\n      </Link>\n    </div>\n  );\n}\n\nexport default Home"],"names":["label","className","ButtonCSS","title","descriptions","useState","isSelected","setIsSelected","CardCSS","style","background","onClick","e","map","description","Math","random","GET_ALL_BUILDINGS","gql","GET_ALL_MEETING_ROOMS","ADD_MEETING","dispatch","useDispatch","useQuery","context","headers","token","loading","error","data","message","buildingPayload","Buildings","d","name","addBuildings","meetingRooms","reduce","acc","curr","length","meetings","forEach","meetingRoom","meetingsNow","freeMeetingRoomsNow","count","meeting","date","startTime","endTime","currTime","Date","getHours","getMinutes","moment","isBefore","isAfter","format","time","beforeTime","afterTime","isBetween","styles","Card","to","Button"],"sourceRoot":""}