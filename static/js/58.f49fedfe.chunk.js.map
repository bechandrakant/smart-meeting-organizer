{"version":3,"file":"static/js/58.f49fedfe.chunk.js","mappings":"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","sources":["webpack://smart-meeting-organizer/./src/components/Button/Button.module.css?ce6f","components/Button/Button.js","webpack://smart-meeting-organizer/./src/components/Card/Card.module.scss?2b03","components/Card/Card.js","graphql/queries.js","pages/SelectRooms/SelectRooms.js","../node_modules/@apollo/src/react/hooks/useMutation.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\",\"focus-visible\":\"Button_focus-visible__vv8Dc\"};","import React from 'react'\nimport ButtonCSS from './Button.module.css'\n\nconst Button = ({ label }) => {\n  return (\n    <button \n      data-testid={\"button-\" + label}\n      className={ButtonCSS.btn}>\n        {label}\n    </button>\n  )\n}\n\nexport default Button","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__zQfcO\",\"title\":\"Card_title__fjt9r\",\"description\":\"Card_description__ZISe4\"};","import React, { useState } from \"react\";\nimport CardCSS from \"./Card.module.scss\";\n\nconst Card = ({\n  title,\n  descriptions\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n  return (\n    <div\n      className={`${CardCSS.card}`}\n      data-testid={\"card-\" + title}\n      style={{ background: isSelected ? \"#ccffcc\" : \"white\" }}\n      onClick={(e) => {\n        setIsSelected(!isSelected);\n      }}\n    >\n      <h2 className={CardCSS.title}>{title}</h2>\n      {descriptions &&\n        descriptions.map((description) => {\n          return (\n            <p className={CardCSS.description} key={Math.random() * 100000}>\n              {description}\n            </p>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default Card","import { gql } from \"@apollo/client\";\n\nexport const GET_ALL_BUILDINGS = gql`\n    query Buildings {\n      Buildings {\n        name\n        meetingRooms {\n          name\n          meetings {\n            title\n            date\n            startTime\n            endTime\n          }\n        }\n      }\n    }\n`;\n\nexport const GET_ALL_MEETING_ROOMS = gql`\n  query MeetingRooms {\n    MeetingRooms {\n      id\n      name\n      floor\n      building {\n        name\n      }\n      meetings {\n        startTime\n        endTime\n      }\n    }\n  }\n`;\n\nexport const ADD_MEETING = gql`\n  mutation Meeting(\n    $id: Int!\n    $title: String!\n    $date: String!\n    $startTime: String!\n    $endTime: String!\n    $meetingRoomId: Int!\n    ) {\n    Meeting(\n      id: $id\n      title: $title\n      date: $date\n      startTime: $startTime\n      endTime: $endTime\n      meetingRoomId: $meetingRoomId\n    ) {\n      id\n      title\n      date\n    }\n  }\n`;","import { useQuery, useMutation } from '@apollo/client';\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Button from '../../components/Button/Button';\nimport Card from '../../components/Card/Card';\nimport { GET_ALL_MEETING_ROOMS, ADD_MEETING } from \"../../graphql/queries\";\nimport { setMeetingRoomId, state } from '../../redux/meetingSlice';\n\nconst SelectRooms = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const currState = useSelector(state => state.meeting);\n\n  const [addMeetingMutation, mutationState] = useMutation(ADD_MEETING, {\n    context: { headers: { token: \"a123gjhgjsdf6576\" } },\n  });\n\n  const { loading, error, data } = useQuery(GET_ALL_MEETING_ROOMS, {\n    context: { headers: { token: \"a123gjhgjsdf6576\" } },\n  });\n\n  if (loading) return \"Loading...\";\n  if (error) return `Error! ${error.message}`;\n\n  const saveMeeting = (e) => {\n    e.preventDefault();\n    addMeetingMutation({\n      variables: {\n        id: parseInt(Math.random() * 10000),\n        title: currState.title,\n        date: currState.date,\n        startTime: currState.startTime,\n        endTime: currState.endTime,\n        meetingRoomId: currState.meetingRoomId\n      }\n    });\n\n    const { loading, error, data } = mutationState;\n    if (loading) console.log(\"loading\")\n    else if (error) console.log(\"error\")\n    else {\n      navigate(\"/\");\n    }\n  }\n\n  const handleClick = (id) => {\n    dispatch(setMeetingRoomId(id));\n  }\n\n  const meetingRooms = data.MeetingRooms.map(room => {\n    return (\n      <div onClick={() => handleClick(room.id)}>\n        <Card\n          title={room.name}\n          id={room.id}\n          descriptions={[room.building.name, `Floor: ${room.floor}`]}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h2>Please Select One of the free rooms</h2>\n      {meetingRooms}\n      <Link to=\"/\">\n        <div onClick={saveMeeting}>\n          <Button label={\"Save\"} />\n        </div>\n      </Link>\n    </div>\n  );\n}\n\nexport default SelectRooms","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    client,\n    mutation,\n    options,\n  });\n\n  // TODO: Trying to assign these in a useEffect or useLayoutEffect breaks\n  // higher-order components.\n  {\n    Object.assign(ref.current, { client, options, mutation });\n  }\n\n  const execute = useCallback((\n    executeOptions: MutationFunctionOptions<\n      TData,\n      TVariables,\n      TContext,\n      TCache\n    > = {}\n  ) => {\n    const {client, options, mutation} = ref.current;\n    const baseOptions = { ...options, mutation };\n    if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n      setResult(ref.current.result = {\n        loading: true,\n        error: void 0,\n        data: void 0,\n        called: true,\n        client,\n      });\n    }\n\n    const mutationId = ++ref.current.mutationId;\n    const clientOptions = mergeOptions(\n      baseOptions,\n      executeOptions as any,\n    );\n\n    return client.mutate(clientOptions).then((response) => {\n      const { data, errors } = response;\n      const error =\n        errors && errors.length > 0\n          ? new ApolloError({ graphQLErrors: errors })\n          : void 0;\n\n      if (\n        mutationId === ref.current.mutationId &&\n        !clientOptions.ignoreResults\n      ) {\n        const result = {\n          called: true,\n          loading: false,\n          data,\n          error,\n          client,\n        };\n\n        if (ref.current.isMounted && !equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      ref.current.options?.onCompleted?.(response.data!);\n      executeOptions.onCompleted?.(response.data!);\n      return response;\n    }).catch((error) => {\n      if (\n        mutationId === ref.current.mutationId &&\n        ref.current.isMounted\n      ) {\n        const result = {\n          loading: false,\n          error,\n          data: void 0,\n          called: true,\n          client,\n        };\n\n        if (!equal(ref.current.result, result)) {\n          setResult(ref.current.result = result);\n        }\n      }\n\n      if (ref.current.options?.onError || clientOptions.onError) {\n        ref.current.options?.onError?.(error);\n        executeOptions.onError?.(error);\n        // TODO(brian): why are we returning this here???\n        return { data: void 0, errors: error };\n      }\n\n      throw error;\n    });\n  }, []);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => {\n    ref.current.isMounted = true;\n\n    return () => {\n      ref.current.isMounted = false;\n    };\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"],"names":["label","className","ButtonCSS","title","descriptions","useState","isSelected","setIsSelected","CardCSS","style","background","onClick","e","map","description","Math","random","GET_ALL_BUILDINGS","gql","GET_ALL_MEETING_ROOMS","ADD_MEETING","navigate","useNavigate","dispatch","useDispatch","currState","useSelector","state","meeting","mutation","options","client","useApolloClient","verifyDocumentType","DocumentType","called","loading","result","setResult","ref","useRef","mutationId","isMounted","Object","assign","current","execute","useCallback","executeOptions","baseOptions","ignoreResults","error","data","clientOptions","mergeOptions","mutate","then","response","errors","length","ApolloError","graphQLErrors","result_1","equal","_a","onCompleted","_b","_c","catch","result_2","onError","_d","reset","useEffect","__assign","useMutation","context","headers","token","addMeetingMutation","mutationState","useQuery","message","meetingRooms","MeetingRooms","room","id","setMeetingRoomId","Card","name","building","floor","to","preventDefault","variables","parseInt","date","startTime","endTime","meetingRoomId","console","log","Button"],"sourceRoot":""}