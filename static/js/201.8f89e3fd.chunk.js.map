{"version":3,"file":"static/js/201.8f89e3fd.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql-tag/src/index.ts","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/parser/index.ts"],"sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate() {\n    return new Promise<QueryResult<TData, TVariables>>(resolve => {\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(this.watchQueryOptions);\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      if (result.error) {\n        this.onError(result.error);\n      } else if (result.data) {\n        this.onCompleted(result.data);\n      }\n    }\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"],"names":["_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","Object","setPrototypeOf","bind","__proto__","_getPrototypeOf","getPrototypeOf","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","_typeof","obj","Symbol","iterator","constructor","_possibleConstructorReturn","TypeError","_construct","Parent","args","Class","a","push","apply","instance","Function","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","toString","indexOf","has","get","set","Wrapper","this","create","value","enumerable","writable","configurable","isObjectLike","invariant","condition","message","Error","LineRegExp","getLocation","source","position","lastLineStart","line","body","matchAll","match","index","length","column","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","slice","printPrefixedLines","map","subLine","existingLines","filter","padLen","max","prefix","join","toNormalizedOptions","firstArg","nodes","positions","path","originalError","extensions","GraphQLError","subClass","superClass","defineProperty","Derived","hasNativeReflectConstruct","result","Super","NewTarget","_this$nodes","_nodeLocations$","_ref","rawArgs","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","locations","pos","originalExtensions","defineProperties","stack","captureStackTrace","output","formattedError","keys","toStringTag","array","syntaxError","description","DirectiveLocation","TokenKind","Lexer","startOfFileToken","Token","lastToken","token","lineStart","lookahead","kind","next","nextToken","readNextToken","end","prev","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","dedentBlockStringLines","isNameContinue","Parser","options","sourceObj","isSource","Source","_lexer","_options","expectToken","Kind","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","operation","OperationTypeNode","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","advance","parseStringLiteral","varName","block","values","any","fields","parseObjectField","parseDirective","innerType","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","hasOwnProperty","startToken","_this$_options2","noLocation","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","console","warn","add","parseDocument","cacheKey","parsed","parse","doc","workSet","key","endToken","stripLoc","gql","literals","arg","gql_1","extras","clear","_taggedTemplateLiteral","strings","raw","freeze","useApolloClient","override","context","useContext","getApolloContext","client","__DEV__","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","inst","forceUpdate","canUseLayoutEffect","assign","checkIfSnapshotChanged","_a","useQuery","query","stateRef","useRef","current","InternalState","state","useState","setTick","tick","useInternalState","previous","asyncResolveFns","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","error","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","verifyDocumentType","DocumentType","previousResult","previousData","Promise","resolve","_this","watchQueryOptions","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","observable","delete","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","variables","getDefaultFetchPolicy","_c","_d","initialFetchPolicy","_b","getSSRObservable","obsQueryFields","useMemo","refetch","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","resultWithoutPartial","called","isNonEmptyArray","errors","ApolloError","graphQLErrors","partial","partialRefetch","cache","operationName","Query","Mutation","Subscription","document","cached","concat","fragments","queries","mutations","subscriptions","_i","x","definition","payload","requiredOperationName"],"sourceRoot":""}